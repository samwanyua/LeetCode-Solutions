Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 10^4
s consists of parentheses only '()[]{}'.

Thoughts:
    for each of the closing bracket 'c'
        check for previous opening bracket 'b'
        if 'c' matches with 'b'
            then remove 'b' from consideration so that next closing bracket
            'd' can be compared with  previous opening bracket 'a'
        we can keep track of previous opening bracket inside stack
            Then for each of closing brackets
            check if the closing bracket matches with opening bracket on top of the stack
            if the brackets do match then remove the opening bracket from the stack




Pseudocode:
    create a stack to keep track of opening parenthesis
    iterate through indices of 's' denothed as 'i'
    retrieve the current character 'c' at index 'i'
    if 'c' is an opening brackets   
        push 'c' into the stack
    else
         if stack is empty or stack.pop() opening bracket does not match 'c'
            return false
    return true if stack is empty ie opening brackets are paired with closing brackets

Time: O(N)
Space: O(N)
    