Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?


Solution
>> Bruteforce solution
    perform nested for loop
        for each of 'x' element
            perform a for loop to find 'y' where 'x + y = target'
    Time complexity O(N^2)

>> Optimized approach
    for each element of 'x'
        check if 'target - x' exists 
        save previous element we have seen earlier
        return the indices of the two numbers - track element and index (use hashmap)
        for each of element 'x' check for 'target -x'
    Time complexity O(N)

>> Pseudocode
    create a hashmap to keep track of element and index
    iterate through the indices of input array
    if 'target - nums[i] exists
        return [i, map.get(target - nums[i])]
    else 
        put nums[i] and 'i' into the map
    return empty array if none

    Time and space complexity O(N) cause we visit each index once, space complexity of O(N) cause we're using a hashmap