Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

// Thoughts
Initialize Counter: A counter cout is initialized to zero. This will keep track of the number of islands found in the grid.

Loop Through Grid:

Outer Loop: Iterates over each row in the grid using the variable i.
Inner Loop: Iterates over each column in the current row using the variable j.
Check for Land: Inside the nested loops, the code checks if the current cell grid[i][j] is '1', indicating it is part of an island.

If it is '1', increment the cout by 1, indicating the discovery of a new island.
Call the helper method callBFS to mark all connected land cells of the current island as visited.
Method callBFS
Boundary Checks: The first condition in the method checks if the current cell is out of bounds or if the cell is already water ('0'). If any of these conditions are met, the method returns immediately.

Mark Cell as Visited: If the current cell is land ('1'), it is marked as visited by setting grid[i][j] to '0'. This prevents revisiting the same cell.

Recursive Calls: The method then makes four recursive calls to check the neighboring cells:

callBFS(grid, i + 1, j): Move downwards.
callBFS(grid, i - 1, j): Move upwards.
callBFS(grid, i, j + 1): Move to the right.
callBFS(grid, i, j - 1): Move to the left.
Overall Flow
The numIslands method initializes a counter and loops through every cell in the grid.
When it encounters a land cell ('1'), it increments the island count and calls callBFS to mark the entire island as visited.
The callBFS method performs a depth-first search to visit all connected land cells, marking them as visited.
Once all cells are processed, numIslands returns the total number of islands found.