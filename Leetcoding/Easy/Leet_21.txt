21. Merge Two Sorted Lists
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

>> Thoughts
   Use Two pointer approach, one pointer at L1, the other one list2
   In each iteration, compare node values at current pointers
   Retrieve the node with a smaller value to be appended on the merged sorted list

>> Pseudocode
    create head and tail variables
    while l1 or l2 is not equal to null
        if l2 is null or l1 != null && l1 < l2
            tail.next = l1
            tail = l1
            l1 = l1.next
        else
            tail.next = l2
            tail = l2
            l2 = l2.next
        Return head.next
Time complexity: O(m +n) m,n are inputs from the two linked lists
Space complexity: o(1)