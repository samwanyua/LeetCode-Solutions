82. Remove Duplicates from Sorted List II

Given the head of a sorted linked list, 
delete all nodes that have duplicate numbers, 
leaving only distinct numbers from the original list. 
Return the linked list sorted as well.

Example 1:
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

Example 2:
Input: head = [1,1,1,2,3]
Output: [2,3]

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

>> Thoughts:
    use two pointer-  current pointer and previous pointer
    current pointer is equal to next nodes
    dummy node pointing to first element
    if the values are duplicate, dummy node points to the next element that is next to duplicate elements

>> PseudoCode:
    define base case: if head is null or head.next  is null return head
    create a dummy listnode
    assign head to dummy.next
    iterate through: if current.next is not null and current.val is current.next.val
        assign current.next to current then previous.next to be current.next
    return dummy.next