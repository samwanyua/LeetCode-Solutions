Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

>> Thoughts
    XORing a number with itself results in 0 (a ^ a = 0).
    XORing a number with 0 results in the number itself (a ^ 0 = a).
    XOR is commutative and associative (order of operations doesn't matter).
    If we XOR all elements of the array together, the pairs of identical elements will cancel each other out,
    leaving only the single element.

>> Function
    function singleNumber(nums):
    result = 0
    for each num in nums:
        result = result XOR num
    return result

The XOR-based approach is efficient with a time complexity of 
O(n) and requires only constant extra space, making it an optimal solution for this problem.






